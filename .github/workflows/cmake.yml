name: Build and Release

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release
  QT_VERSION: 6.5.3
  PROJECT_NAME: KubeConfManager

jobs:
  build-windows:
    name: Windows 64-bit
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
      
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{env.QT_VERSION}}
        arch: win64_msvc2019_64
        modules: qtwebsockets qtwebchannel qtwebengine
        
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
    
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_PREFIX_PATH=${{env.Qt6_DIR}}
      
    - name: Build
      run: |
        cd build
        cmake --build . --config ${{env.BUILD_TYPE}}
      
    - name: Deploy Qt Dependencies
      run: |
        cd build
        windeployqt.exe --release --no-translations --no-system-d3d-compiler --no-opengl-sw ${{env.BUILD_TYPE}}/${{env.PROJECT_NAME}}.exe
      
    - name: Package Application
      run: |
        mkdir ${{env.PROJECT_NAME}}-win64
        copy build\${{env.BUILD_TYPE}}\${{env.PROJECT_NAME}}.exe ${{env.PROJECT_NAME}}-win64\
        copy build\*.dll ${{env.PROJECT_NAME}}-win64\ || echo "No DLLs in build root"
        xcopy /s /y build\${{env.BUILD_TYPE}}\*.dll ${{env.PROJECT_NAME}}-win64\ || echo "No DLLs in Release dir"
        xcopy /s /e /y build\platforms ${{env.PROJECT_NAME}}-win64\platforms\ || echo "No platforms dir"
        xcopy /s /e /y build\styles ${{env.PROJECT_NAME}}-win64\styles\ || echo "No styles dir"
        xcopy /s /e /y build\imageformats ${{env.PROJECT_NAME}}-win64\imageformats\ || echo "No imageformats dir"
        xcopy /s /e /y build\iconengines ${{env.PROJECT_NAME}}-win64\iconengines\ || echo "No iconengines dir"
        mkdir ${{env.PROJECT_NAME}}-win64\assets
        xcopy /s /e /y assets ${{env.PROJECT_NAME}}-win64\assets\ || echo "No assets dir"
        
    - name: Create ZIP
      run: |
        Compress-Archive -Path ${{env.PROJECT_NAME}}-win64 -DestinationPath ${{env.PROJECT_NAME}}-win64.zip
      
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{env.PROJECT_NAME}}-windows-x64
        path: ${{env.PROJECT_NAME}}-win64.zip

  build-linux:
    name: Linux DEB Package
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
      
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl1-mesa-dev cmake ninja-build fakeroot devscripts debhelper
      
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{env.QT_VERSION}}
        modules: qtwebsockets qtwebchannel
      
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=/usr
      
    - name: Build
      run: |
        cd build
        cmake --build . --config ${{env.BUILD_TYPE}} -j$(nproc)
        
    - name: Create DEB Package Structure
      run: |
        mkdir -p debian-pkg/DEBIAN
        mkdir -p debian-pkg/usr/bin
        mkdir -p debian-pkg/usr/share/applications
        mkdir -p debian-pkg/usr/share/pixmaps
        mkdir -p debian-pkg/usr/share/${{env.PROJECT_NAME}}/assets
        
        # Copy executable
        cp build/${{env.PROJECT_NAME}} debian-pkg/usr/bin/
        
        # Copy assets
        cp -r assets/* debian-pkg/usr/share/${{env.PROJECT_NAME}}/assets/ || echo "No assets to copy"
        
        # Create desktop file
        cat > debian-pkg/usr/share/applications/${{env.PROJECT_NAME}}.desktop << EOF
        [Desktop Entry]
        Name=${{env.PROJECT_NAME}}
        Comment=Kubernetes Configuration Manager
        Exec=/usr/bin/${{env.PROJECT_NAME}}
        Icon=/usr/share/pixmaps/${{env.PROJECT_NAME}}.png
        Terminal=false
        Type=Application
        Categories=Development;Utility;
        EOF
        
        # Copy icon
        cp assets/logo.png debian-pkg/usr/share/pixmaps/${{env.PROJECT_NAME}}.png || echo "Using default icon"
        
        # Create control file
        VERSION=$(grep -oP 'project\(KubeConfManager VERSION \K[0-9\.]+' CMakeLists.txt)
        
        cat > debian-pkg/DEBIAN/control << EOF
        Package: ${{env.PROJECT_NAME}}
        Version: ${VERSION}
        Section: devel
        Priority: optional
        Architecture: amd64
        Depends: libc6 (>= 2.14), libqt6core6, libqt6gui6, libqt6widgets6
        Maintainer: KubeConfManager Team <jvginer@gentooxativa.com>
        Description: Kubernetes Configuration Manager
         A tool to manage and merge Kubernetes configuration files.
         Features include context switching, cluster editing, 
         and kubeconfig merging capabilities.
        EOF
        
    - name: Build DEB Package
      run: |
        dpkg-deb --build debian-pkg
        mv debian-pkg.deb ${{env.PROJECT_NAME}}_$(grep -oP 'project\(KubeConfManager VERSION \K[0-9\.]+' CMakeLists.txt)_amd64.deb
      
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{env.PROJECT_NAME}}-deb-package
        path: ${{env.PROJECT_NAME}}_*_amd64.deb

  release:
    name: Create Release
    needs: [build-windows, build-linux]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    
    steps:
    - name: Download Windows Artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{env.PROJECT_NAME}}-windows-x64
        
    - name: Download DEB Package
      uses: actions/download-artifact@v3
      with:
        name: ${{env.PROJECT_NAME}}-deb-package
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{env.PROJECT_NAME}}-win64.zip
          ${{env.PROJECT_NAME}}_*_amd64.deb
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}